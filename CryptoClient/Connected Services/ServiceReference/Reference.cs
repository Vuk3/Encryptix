//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryptoClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        CryptoServer.CompositeType GetDataUsingDataContract(CryptoServer.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<CryptoServer.CompositeType> GetDataUsingDataContractAsync(CryptoServer.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AesEncrypt", ReplyAction="http://tempuri.org/IService/AesEncryptResponse")]
        void AesEncrypt(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AesEncrypt", ReplyAction="http://tempuri.org/IService/AesEncryptResponse")]
        System.Threading.Tasks.Task AesEncryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AesDecrypt", ReplyAction="http://tempuri.org/IService/AesDecryptResponse")]
        void AesDecrypt(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AesDecrypt", ReplyAction="http://tempuri.org/IService/AesDecryptResponse")]
        System.Threading.Tasks.Task AesDecryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/XXTEAEncrypt", ReplyAction="http://tempuri.org/IService/XXTEAEncryptResponse")]
        void XXTEAEncrypt(CryptoServer.Helper.FileExtend[] list, byte[] key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/XXTEAEncrypt", ReplyAction="http://tempuri.org/IService/XXTEAEncryptResponse")]
        System.Threading.Tasks.Task XXTEAEncryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/XXTEADecrypt", ReplyAction="http://tempuri.org/IService/XXTEADecryptResponse")]
        void XXTEADecrypt(CryptoServer.Helper.FileExtend[] list, byte[] key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/XXTEADecrypt", ReplyAction="http://tempuri.org/IService/XXTEADecryptResponse")]
        System.Threading.Tasks.Task XXTEADecryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : CryptoClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<CryptoClient.ServiceReference.IService>, CryptoClient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public CryptoServer.CompositeType GetDataUsingDataContract(CryptoServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<CryptoServer.CompositeType> GetDataUsingDataContractAsync(CryptoServer.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void AesEncrypt(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV) {
            base.Channel.AesEncrypt(list, key, IV);
        }
        
        public System.Threading.Tasks.Task AesEncryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV) {
            return base.Channel.AesEncryptAsync(list, key, IV);
        }
        
        public void AesDecrypt(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV) {
            base.Channel.AesDecrypt(list, key, IV);
        }
        
        public System.Threading.Tasks.Task AesDecryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key, byte[] IV) {
            return base.Channel.AesDecryptAsync(list, key, IV);
        }
        
        public void XXTEAEncrypt(CryptoServer.Helper.FileExtend[] list, byte[] key) {
            base.Channel.XXTEAEncrypt(list, key);
        }
        
        public System.Threading.Tasks.Task XXTEAEncryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key) {
            return base.Channel.XXTEAEncryptAsync(list, key);
        }
        
        public void XXTEADecrypt(CryptoServer.Helper.FileExtend[] list, byte[] key) {
            base.Channel.XXTEADecrypt(list, key);
        }
        
        public System.Threading.Tasks.Task XXTEADecryptAsync(CryptoServer.Helper.FileExtend[] list, byte[] key) {
            return base.Channel.XXTEADecryptAsync(list, key);
        }
    }
}
